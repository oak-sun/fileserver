type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;
    import java.util.*;
    import java.util.stream.Collectors;

    public class Main {
        public static void main(String[] args) {
            Basket b = new Basket();
            b.menu();
        }
    }
     class Basket {
        private final HashSet<String> basket;
        private final HashSet<String> validOps;

        public Basket() {
            basket = new HashSet<>();
            validOps = Arrays.stream(Act.values())
                    .map(op -> op.toString().toLowerCase())
                    .collect(Collectors.toCollection(HashSet::new));
        }

        public void menu() {
            Scanner scanner = new Scanner(System.in);
            while (true) {
                String input = scanner.nextLine();
                if ("exit".equals(input)) {
                    break;
                } else {
                    oracle(parseInput(input));
                }
            }
        }

        private void oracle(ParseResponse response) {
            String file = response.getName();
            Act a = response.getOperation();
            switch (a) {
                case ADD: {
                    if (file.matches("file(10|[1-9])") && !basket.contains(file)) {
                        basket.add(file);
                        System.out.printf("The file %s added successfully%n", file);
                    } else {
                        System.out.printf("Cannot add the file %s%n", file);
                    }
                    break;
                }
                case GET: {
                    if (basket.contains(file)) {
                        System.out.printf("The file %s was sent%n", file);
                    } else {
                        System.out.printf("The file %s not found%n", file);
                    }
                    break;
                }
                case DELETE: {
                    if (basket.remove(file)) {
                        System.out.printf("The file %s was deleted%n", file);
                    } else {
                        System.out.printf("The file %s not found%n", file);
                    }
                    break;
                }
            }
        }

        private ParseResponse parseInput(String input) {
            String[] portions = input.split(" ");
            return new ParseResponse(Act.valueOf(portions[0].toUpperCase()), portions[1]);
        }

        public static class ParseResponse {
            private final Act operation;
            private final String name;

            public ParseResponse(Act operation, String name) {
                this.operation = operation;
                this.name = name;
            }

            public Act getOperation() {
                return operation;
            }
            public String getName() {
                return name;
            }
        }

        private enum Act{
            ADD,
            GET,
            DELETE,
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class FileServerTest extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram client = new TestedProgram("client");
            TestedProgram server = new TestedProgram("server");
            server.setReturnOutputAfterExecution(true);

            server.startInBackground();

            Thread.sleep(1000);
            String serverOutput = server.getOutput().trim();

            String serverStartedMessage = "Server started!";
            if (!serverOutput.equals(serverStartedMessage)) {
                throw new WrongAnswer("Server output should be \"" + serverStartedMessage + "\" until the client connects!");
            }

            String clientOutput = client.start().trim();
            serverOutput = server.getOutput().trim();

            if (clientOutput.isEmpty()) {
                return CheckResult.wrong("Client output shouldn't be empty!");
            }

            if (serverOutput.equals(serverStartedMessage)) {
                return CheckResult.wrong("After the client connects to the server you should output the received data!");
            }

            if (!serverOutput.contains("Received: Give me everything you have!")) {
                return CheckResult.wrong("Server output should contain \"Received: Give me everything you have!\"");
            }

            if (!serverOutput.contains("Sent: All files were sent!")) {
                return CheckResult.wrong("Server output should contain \"Sent: All files were sent!\"");
            }

            if (serverOutput.indexOf("Sent: All files were sent!") < serverOutput.indexOf("Received: Give me everything you have!")) {
                return CheckResult.wrong("The server should print \"Sent: All files were sent!\" only after " +
                    "\"Received: Give me everything you have!\" was printed!");
            }

            if (!clientOutput.contains("Sent: Give me everything you have!")) {
                return CheckResult.wrong("Client output should contain \"Sent: Give me everything you have!\"");
            }

            if (!clientOutput.contains("Received: All files were sent!")) {
                return CheckResult.wrong("Client output should contain \"Received: All files were sent!\"");
            }

            if (clientOutput.indexOf("Received: All files were sent!") < clientOutput.indexOf("Sent: Give me everything you have!")) {
                return CheckResult.wrong("The client should print \"Received: All files were sent!\" only after " +
                    "\"Sent: Give me everything you have!\" was printed!");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/client/Main.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5426#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 02 Nov 2022 09:34:49 UTC
record: 2
